require 'ostruct'

# -*- mode: ruby -*-
# vi: set ft=ruby :
$subnet = '172.168.10'
$etcd_instances = 1
$k8s_master_instances = 1
$k8s_worker_instances = 1
$initial_ip_suffix = 101
$box = 'bento/ubuntu-16.04'

# @return [Array]
def server_configurations
  available_ips = ($etcd_instances + $k8s_master_instances + $k8s_worker_instances)
                    .times
                    .map { |index| "#{$subnet}.#{$initial_ip_suffix+index}" }
  [].concat(
    build_servers(prefix: 'local-etcd-server',
                  instances: $etcd_instances,
                  available_ips: available_ips,
                  tags: ['etcd'])
  ).concat(
    build_servers(prefix: 'local-k8s-master-server',
                  instances: $k8s_master_instances,
                  available_ips: available_ips,
                  tags: ['kube-master'])
  ).concat(
    build_servers(prefix: 'local-k8s-worker-server',
                  instances: $k8s_worker_instances,
                  available_ips: available_ips,
                  tags: ['kube-node'])
  )
end

# @return [Array]
def build_servers(prefix:, instances:, available_ips:, tags:)
  instances.times.map { |instance_number| OpenStruct.new(
    name: "#{prefix}-#{instance_number.next}",
    ip: available_ips.delete_at(0),
    tags: tags
  ) }
end

def server_names_by_tag(tag)
  server_configurations.select { |server| server.tags.include?(tag) }.map(&:name)
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.ssh.insert_key = false
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = $box

  # plugin conflict
  if Vagrant.has_plugin?('vagrant-vbguest')
    config.vbguest.auto_update = false
  end

  ansible_host_vars = {}
  server_configurations.each do |server|
    config.vm.define server.name do |config|
      config.vm.hostname = server.name
      config.vm.network :private_network, ip: server.ip
      ansible_host_vars[server.name] = {
        'ip' => server.ip
      }
    end
  end

  config.vm.provision 'ansible' do |ansible|
    ansible.playbook = 'noop-playbook.yml'
    ansible.host_vars = ansible_host_vars
    ansible.groups = {
      'etcd' => server_names_by_tag('etcd'),
      'kube-master' => server_names_by_tag('kube-master'),
      'kube-node' => server_names_by_tag('kube-node'),
      'k8s-cluster:children' => ['kube-master', 'kube-node'],
    }
    ansible.sudo = true
    ansible.limit = 'all'
    ansible.host_key_checking = false
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider 'virtualbox' do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false

    # Customize the amount of memory on the VM:
    vb.memory = '1536'
    # vb.cpus = '2'
    vb.linked_clone = true
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
